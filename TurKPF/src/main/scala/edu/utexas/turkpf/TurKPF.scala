/**
 * Adapts TurKontrol into a Particle Filter
 * TurKontrol was presented in "Decision-Theoretic Control of Crowd-Sourced Workflows"
 * by Peng Dai, Mausam, and Daniel S. Weld (2010)
 *
 * Author:          Ethan Petuchowski
 * Date Started:    6/18/13
 * License:         Unknown
 */

import math._
import org.apache.commons.math3.distribution.{BetaDistribution, NormalDistribution}
import scala.util.Random

/* this means one can choose a set of parameters by replacing this line with
 *  import SecondExperiment._  and so on  */
import FirstExperiment._

/* TODO: the LookAhead */
/* TODO: it shouldn't let you spend more than your allowance */

/* Particle Filter representation of artifact quality probability density functions */
case class QualityDistribution(numParticles: Int, particles: Array[Double])
{
    def this(n: Int) = this(n, new BetaDistribution(1,9).sample(n))

    def this(particles: Array[Double]) = this(NUM_PARTICLES, particles)

    def this() = this(NUM_PARTICLES, new BetaDistribution(1,9).sample(NUM_PARTICLES))

    // [DTC] (eq. 13)
    def find_improvementFunctionMean(qlty: Double): Double = {
        val accuracy: Double = qstn.wrkrs.accuracy(qlty)
        qlty + 0.5 * ((1 - qlty) * (accuracy - 0.5) + qlty * (accuracy - 1))
    }

    // [DTC] ยง Experimental Setup
    def improvementDistr(qlty: Double) = {
        val mu = find_improvementFunctionMean(qlty)
        new BetaDistribution(10 * mu, 10 * (1 - mu))
    }

    // [DTC] (eq. 1), q => generate f_{ Q' | particle.q } (q') and sample from it
    /*
     * THE WAY THIS WORKS:
     * We go through each particle, and using its value (which is an estimate of the qlty),
     * we generate an "improvement distribution" describing how much we can expect [an avg.]
     * worker to improve the quality of the artifact. We take a "random" stab at the new
     * quality after the "improvement job" by sampling from the "improvement distribution".
     */
    // TODO: This might be a faster way to implement this: (generating directly, not sampling)
    // http://doodleproject.sourceforge.net/numerics/numerics4j/1.3/api/net/sf/doodleproject/numerics4j/random/BetaRandomVariable.html
    def predict: QualityDistribution =
        new QualityDistribution(particles map {improvementDistr(_).sample})

    /* fold ALL the partBs through prob_true() with EACH partA
     * [DTC] (eq. 5-6)
     */
    def weight_and_sample(vote: Boolean, that: QualityDistribution):
    QualityDistribution = {

        // get P( b_{n+1} | q ) :  [DTC] (eq. 6)
        val rawWeights = this.particles map { partA =>
            (0.0 /: that.particles)((sum, partB) =>
                sum + qstn.invertIfFalse(vote, qstn.prob_true_given_Qs(partA, partB)))
        }

        // get f_{ Q | b_{n+1} } (q) :  [DTC] (eq. 5)
        val weightNorm = rawWeights.sum
        val weights = rawWeights map { _ / weightNorm } // normalize weights, works
        QualityDistribution(NUM_PARTICLES,
            (1 to NUM_PARTICLES).toArray map {
                _ => random_sample_given_weights(weights)
            }
        )
    }

    /* algorithm for sampling from given set of points with associated weights:
     * generate a random number in [0,1), use the CDF of the weights to use the
     * random number to figure out what the sampled value is
     *
     * I debugged this function and it works as expected
     */
    def random_sample_given_weights(weights: Array[Double]): Double = {
        val rand = Random.nextDouble
        var accrue = 0.0
        for ((weight, index) <- weights.zipWithIndex) {
            accrue += weight
            if (rand < accrue)
                return this.particles(index)
        }
        throw new RuntimeException // shouldn't ever get here
        particles(particles.length-1)
    }

    // avg loc of particles in associated Particle Filter
    // this doesn't actually make an appearance in the algorithm,
    // it's just for debugging
    def meanQltyEst: Double = particles.sum / NUM_PARTICLES
}

/* model all workers with just one worker-independent model */
case class Workers(trueGX: Double)
{
    val LEARNING_RATE = 0.05
    var estGX: Double = 1    // set to the mean of the true distribution
                             // could be altered to test robustness

    // [DTC] (eq. 3)
    def generateVote(difficulty: Double): Boolean = random < accuracy(difficulty)

    // [DTC] (above eq. 3)
    def accuracy(difficulty: Double) = 0.5 * (1 + pow(1 - difficulty, estGX))

    /* I'm not sure about my whole "bigger/smaller" logic it was a guess...
     *  plus there HAS to be a less unsightly way of accomplishing the same thing */
    // higher GX means Worse worker
    def updateGX(votes: List[Boolean]) {    // [DTC] (below eq. 12)
        val (trues, falses) = votes.partition(_ == true)
        val trueBigger = trues.length > falses.length
        val bigger  = if (trueBigger) trues.length  else falses.length
        val smaller = if (trueBigger) falses.length else trues.length
        val d = qstn.artifact_difficulty
        estGX -= bigger * d * LEARNING_RATE
        estGX += smaller * (1 - d) * LEARNING_RATE
    }
}

case class Question(trueAnswer: Boolean)
{
    var balance = INITIAL_ALLOWANCE
    var qlty = INITIAL_QUALITY
    var qltyPrime = 0.0

    // [DTC] trueGX > 0; code is worker_dist-agnostic
    var workerTrueGm = WORKER_DIST.sample
    while (workerTrueGm < 0) workerTrueGm = WORKER_DIST.sample

    val wrkrs = Workers(workerTrueGm)

    // [DTC] ยง Experimental Setup
    var f_Q_of_q = new QualityDistribution  // defaults to BetaDist(1,9)

    // my goal here is to initialize the qPrime prior a little higher than the q prior
    // a better way to do this would be nice
    var f_Q_of_qPrime = new QualityDistribution(
        new BetaDistribution(2,9).sample(NUM_PARTICLES)
    )

    def artifact_difficulty: Double = difficulty(qlty, qltyPrime)

    // [DTC] (eq. 2)
    def difficulty(qlty: Double, qltyPrime: Double): Double =
        1 - pow((qlty - qltyPrime).abs, DIFFICULTY_CONSTANT)

    def artifact_utility: Double =
        convolute_Utility_with_Particles(f_Q_of_q)

    // the math for this checks out
    def convolute_Utility_with_Particles(dist: QualityDistribution): Double =
        (0.0 /: dist.particles)(_ + estimate_artifact_utility(_)) / NUM_PARTICLES

    // [DTC] (eq. 12)
    // this is O(numParticles^2)...they also note that this equation takes a while
    // TODO: Why is this never used? What is this thing for anyway?
    def dStar: Double = {
        val normQ = f_Q_of_q.particles.sum
        val normQP = f_Q_of_qPrime.particles.sum
        (0.0 /: f_Q_of_q.particles)((sum, q) =>
            sum + (0.0 /: f_Q_of_qPrime.particles)((sum2, qPrime) =>
                sum2 + q * qPrime * difficulty(q, qPrime) / normQ
            ) / normQP
        )
    }

    def submit_final() = {
        println("Final Utility: " + artifact_utility)
        sys.exit(0)
    }

    // [DTC] (top-right of page 4)
    def utility_of_improvement_job: Double =
        utility_of_stopping_voting - IMPROVEMENT_COST * UTILITY_OF_$$$

    // [DTC] (eq. 9)
    def utility_of_stopping_voting: Double = { max(
        convolute_Utility_with_Particles(f_Q_of_q),  // [DTC] (eq. 10)
        convolute_Utility_with_Particles(f_Q_of_qPrime)  // [DTC] (eq. 11)
    )}

    /***************************** BALLOT JOB STUFF *******************************/
    // [DTC] (bottom-left Pg. 4)
    def utility_of_voting: Double = {
        val probYes = probability_of_yes_vote
        println("probYes: " + probYes)
        max(
            expVal_OLD_artifact_with_addnl_vote(probYes),
            expVal_NEW_artifact_with_addnl_vote(probYes)
        ) - BALLOT_COST * UTILITY_OF_$$$
    }

    // [DTC] (bottom-left Pg. 4)
    /* PSEUDOCODE for calculating P(b_{n+1}):
     * For each particle in the "normal" set
     *  "Convolute" the [entire] "predicted" set of particles with the accuracy according to whether
     *  the particle in the predicted set has a higher value than the one in the normal set (eq. 3)
     *   This convolution will yield a scalar
     * This [outer] summation will yield another scalar (our result, P(b_{n+1}))
     */
    def probability_of_yes_vote = {
        (0.0 /: f_Q_of_q.particles)((sumA, particleA) =>
            sumA + particleA * (0.0 /: f_Q_of_qPrime.particles)((sumB, particleB) =>

                // TODO check that multiplying particleB in makes sense
                sumB + prob_true_given_Qs(particleA, particleB) * particleB
            ) / f_Q_of_qPrime.particles.sum
        ) / f_Q_of_q.particles.sum
    }

    // I checked and this function works properly
    def prob_true_given_Qs(q: Double, qPrime: Double): Double =
        qstn.invertIfFalse(q < qPrime, wrkrs.accuracy(qstn.difficulty(q, qPrime)))

    /* [DTC] (bottom-left Pg. 4)
     * PSEUDOCODE for calculating E[ U( Q | b_{n} + 1 ) ]:
     * Then, For each particle in the result of performing (eq. 5)
     *   For each vote outcome \in { 0, 1 }
     *     Multiply U(q) * particle.q * P(b_{n+1} = {0,1})
     */
    def expVal_OLD_artifact_with_addnl_vote(probYes: Double): Double =
        expVal_after_a_vote(dist_Q_after_vote, probYes)

    // E[ U( Q' | b_{n} + 1 ) ]; the same thing as above
    def expVal_NEW_artifact_with_addnl_vote(probYes: Double) =
        expVal_after_a_vote(dist_QPrime_after_vote, probYes)

    def expVal_after_a_vote(f: Boolean => QualityDistribution, probYes: Double): Double = {
        if (probYes > 1 || probYes < 0) throw new RuntimeException
        convolute_Utility_with_Particles(f(true)) * probYes +
        convolute_Utility_with_Particles(f(false)) * (1 - probYes)
    }

    // [DTC] (eq. 5)
    /* What this Does:
     * Creates a posterior distribution (estimate) of the quality of the artifact
     *  given one more ballot
     */
    def dist_Q_after_vote(vote: Boolean): QualityDistribution =
        f_Q_of_q.weight_and_sample(vote, f_Q_of_qPrime)

    /* [DTC] (eq. 7-8) the same as above, but the order in
     *   which the distributions are used is switched
     */
    def dist_QPrime_after_vote(vote: Boolean): QualityDistribution =
        f_Q_of_qPrime.weight_and_sample(vote, f_Q_of_q)

    def get_addnl_ballot_and_update_dists(): Boolean = {
        balance -= BALLOT_COST  // pay for it
        val vote: Boolean = wrkrs.generateVote(artifact_difficulty)
        printf("vote :: %s #L293\n\n", vote.toString.map(_.toUpper))
        f_Q_of_q      = dist_Q_after_vote(vote)  // [DTC] (eqs. 4,5,6,7,8)
        f_Q_of_qPrime = dist_QPrime_after_vote(vote)
        votes ::= vote
        print("(" + votes.mkString(", ") + ")\n")
        vote
    }

    var votes = List[Boolean]()

    def invertIfFalse(t: Boolean, v: Double): Double = if (t) v else 1-v
    /****************************** END BALLOT JOB STUFF **************************/

    def improvement_job() {
        // pay for it
        balance -= IMPROVEMENT_COST

        // choose to continue with alpha or alphaPrime [DTC top-right pg. 4]
        if (convolute_Utility_with_Particles(f_Q_of_q)
          < convolute_Utility_with_Particles(f_Q_of_qPrime))
            f_Q_of_q = f_Q_of_qPrime

        wrkrs.updateGX(votes)

        // clear votes out
        votes = List[Boolean]()

        // create new prior for quality of improved artifact
        f_Q_of_qPrime = f_Q_of_q.predict
    }

    def choose_action() {
        val artifactUtility    = artifact_utility
        val voteUtility        = utility_of_voting
        val improvementUtility = utility_of_improvement_job

        println("current balance:    " + balance)
        println("\nParticles:\n(         " + qstn.f_Q_of_q.particles.mkString(", ") + ")\n")
        println("Average:            " + qstn.f_Q_of_q.particles.sum/NUM_PARTICLES)
        println("artifactUtility:    " + artifactUtility)
        println("voteUtility:        " + voteUtility)
        println("improvementUtility: " + improvementUtility)
        println("meanQltyEst:        " + qstn.f_Q_of_q.meanQltyEst)
        println("PrimeMeanQltyEst:   " + qstn.f_Q_of_qPrime.meanQltyEst)

        if (improvementUtility > voteUtility
        && improvementUtility > artifactUtility
        && balance > IMPROVEMENT_COST)
        {
            println("\n=> | IMPROVEMENT job |")
            println("\n\n*******************************************************************")
            improvement_job()
        }
        else if (voteUtility > artifactUtility
                && balance > BALLOT_COST)
        {
            println("\n=> | BALLOT job |")
            get_addnl_ballot_and_update_dists()
            println("\n\n*******************************************************************")
        }
        else submit_final()
    }
}

object FirstExperiment
{
    /* [DTC] gmX "follow a bell shaped distribution"
     *           "average error coefficient gm=1",
     *             where gmX > 0 */
    val WORKER_DIST = new NormalDistribution(1,0.2)

    /* this is a method so that it can be set to generate a random
     * initial quality every time a question starts */
    def INITIAL_QUALITY = .01 // new BetaDistribution(1,9).sample

    // [DTC] ยง Experimental Setup
    def estimate_artifact_utility(qlty: Double): Double =
        1000 * (exp(qlty) - 1) / (exp(1) - 1)

    val IMPROVEMENT_COST    = .05
    val BALLOT_COST         = .01
    val DIFFICULTY_CONSTANT = 0.5
    val LOOKAHEAD_DEPTH     = 3  // not using this at this point
    val NUM_QUESTIONS       = 10000
    val INITIAL_ALLOWANCE   = 10.0
    val NUM_PARTICLES       = 100
    val UTILITY_OF_$$$      = .05  // let's just say it's "1" for simplicity

    /* so that MANY Questions can be run Per Experiment
     * I'ma try to get just one Question working first though */
    val qstn = Question(trueAnswer=true)
}

object TestStuff extends App { while(true) FirstExperiment.qstn.choose_action() }

// TODO Judging by this output it seems like I got the effect of a vote job backwards
// on which particle filter goes where
/*
/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home/bin/java -Didea.launcher.port=7532 "-Didea.launcher.bin.path=/Applications/IntelliJ IDEA 12 CE.app/bin" -Dfile.encoding=UTF-8 -classpath "/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home/lib/ant-javafx.jar:/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home/lib/dt.jar:/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home/lib/javafx-doclet.jar:/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home/lib/javafx-mx.jar:/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home/lib/jconsole.jar:/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home/lib/sa-jdi.jar:/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home/lib/tools.jar:/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home/jre/lib/jfxrt.jar:/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home/jre/lib/JObjC.jar:/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home/jre/lib/management-agent.jar:/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home/jre/lib/ext/dnsns.jar:/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home/jre/lib/ext/localedata.jar:/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home/jre/lib/ext/sunec.jar:/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar:/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar:/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home/jre/lib/ext/zipfs.jar:/Users/Ethan/Dropbox/MLease/git/TurKPF/target/scala-2.10/classes:/Users/Ethan/.sbt/boot/scala-2.10.2/lib/scala-library.jar:/Users/Ethan/.ivy2/cache/org.apache.commons/commons-math3/jars/commons-math3-3.2.jar:/Applications/IntelliJ IDEA 12 CE.app/lib/idea_rt.jar" com.intellij.rt.execution.application.AppMain TestStuff
probYes: 0.516488612881366
current balance:    10.0

Particles:
(         0.08054408663284661, 0.01717720511387524, 0.02156251413980377, 0.1611152939839824, 0.1529474729365281, 0.027026548521514263, 0.06668309340240507, 0.06690323082290275, 0.054779364844669366, 0.04767229051733561, 0.13665058764659174, 0.03143505051592473, 0.2648957407213583, 0.04485890502184512, 0.03291764270074795, 0.016549087304057207, 0.040443172313407647, 0.20060357040411717, 0.07290542400795465, 0.09691257074901587, 0.3386880341762082, 0.14608312013486585, 0.10895204797794716, 0.022785204453406305, 0.09095123778218381, 0.1327129059698771, 0.022521809818271676, 0.0925373077450339, 0.21796741478876705, 0.3092936508218015, 0.1015969465020805, 0.2084541140670587, 0.03311017757138885, 0.011664094008190224, 0.10144876863768625, 0.03711890127259615, 0.30020261675415505, 0.043682699315160424, 0.31155095831256635, 0.03497172074540779, 0.0473799946901092, 0.048588706818621416, 0.015175513598902415, 0.18509307254597124, 0.21165067182026134, 0.17317525124247474, 0.01758332362284342, 0.010242176935303103, 0.07026435540768271, 0.053851278078705093, 0.20098795877192926, 0.384161495280738, 0.0040832246378885995, 0.16897413597841301, 0.05258884110584262, 0.005974761984974088, 0.35358317012239254, 0.7330976666995207, 0.27224079219575736, 0.06996368124501633, 0.09113810077506382, 0.05832209467819667, 0.05888187113046745, 0.010428734554333742, 0.08913819642646316, 0.11109031084992348, 0.03152769109714712, 0.0022397563222106872, 0.08235642535238925, 0.3875664719251685, 0.14534518591785203, 0.06675710778857104, 0.1671884476449511, 0.05962711859194576, 0.054193856598535935, 0.07233170131287801, 0.09842472885933583, 0.1322412232389237, 0.022628083740426057, 0.012191520074837741, 0.10173343222240296, 0.0019392719927064594, 0.028672502589047542, 0.042167794023203635, 0.03410948638818384, 0.10200189891073165, 0.01685121557538799, 0.03565054967914871, 0.19475184507092022, 0.06465200091849535, 0.14292566854082148, 0.04006734632048167, 0.006424210106859019, 0.06991089419022045, 0.05461354182084414, 0.11845398973129213, 0.07028323434459341, 0.1557126028877897, 0.31333063737873873, 0.14990587031396746)

Average:            0.10877313275824337
artifactUtility:    71.35858931087789
voteUtility:        109.02344718552168
improvementUtility: 107.25755375070462
meanQltyEst:        0.10877313275824337
PrimeMeanQltyEst:   0.16356546570726926

=> | BALLOT job |
vote :: TRUE #L293

(true)


*******************************************************************
probYes: 0.5579631922959843
current balance:    9.99

Particles:
(         0.11845398973129213, 0.11845398973129213, 0.010428734554333742, 0.05888187113046745, 0.08235642535238925, 0.09095123778218381, 0.005974761984974088, 0.01685121557538799, 0.040443172313407647, 0.05832209467819667, 0.07026435540768271, 0.09095123778218381, 0.1529474729365281, 0.08913819642646316, 0.040443172313407647, 0.17317525124247474, 0.03291764270074795, 0.015175513598902415, 0.022521809818271676, 0.03410948638818384, 0.07233170131287801, 0.0022397563222106872, 0.022628083740426057, 0.30020261675415505, 0.06996368124501633, 0.2084541140670587, 0.09691257074901587, 0.005974761984974088, 0.043682699315160424, 0.17317525124247474, 0.07028323434459341, 0.06668309340240507, 0.042167794023203635, 0.1611152939839824, 0.05832209467819667, 0.02156251413980377, 0.02156251413980377, 0.20098795877192926, 0.10895204797794716, 0.27224079219575736, 0.03711890127259615, 0.022521809818271676, 0.03143505051592473, 0.03565054967914871, 0.022628083740426057, 0.011664094008190224, 0.03311017757138885, 0.384161495280738, 0.11109031084992348, 0.05962711859194576, 0.10144876863768625, 0.03711890127259615, 0.0022397563222106872, 0.30020261675415505, 0.022521809818271676, 0.10144876863768625, 0.07233170131287801, 0.11109031084992348, 0.06991089419022045, 0.054193856598535935, 0.2648957407213583, 0.08054408663284661, 0.10895204797794716, 0.1015969465020805, 0.03291764270074795, 0.20098795877192926, 0.04767229051733561, 0.1529474729365281, 0.08054408663284661, 0.01758332362284342, 0.07028323434459341, 0.07028323434459341, 0.07026435540768271, 0.028672502589047542, 0.040443172313407647, 0.03311017757138885, 0.015175513598902415, 0.053851278078705093, 0.1611152939839824, 0.03152769109714712, 0.03711890127259615, 0.04485890502184512, 0.03711890127259615, 0.010242176935303103, 0.07026435540768271, 0.01758332362284342, 0.054193856598535935, 0.07028323434459341, 0.18509307254597124, 0.04006734632048167, 0.1611152939839824, 0.10144876863768625, 0.03311017757138885, 0.11845398973129213, 0.30020261675415505, 0.06690323082290275, 0.07026435540768271, 0.03152769109714712, 0.09095123778218381, 0.07233170131287801)

Average:            0.08240220368352144
artifactUtility:    51.818733358315214
voteUtility:        82.9342058625325
improvementUtility: 91.96832403220793
meanQltyEst:        0.08240220368352144
PrimeMeanQltyEst:   0.1429292532910518

=> | IMPROVEMENT job |


*******************************************************************
probYes: 0.6760596790006064
current balance:    9.94

Particles:
(         0.05610498249413163, 0.12058423982414058, 0.06089140051642112, 0.17572263613791636, 0.04921625820848417, 0.1671051976809945, 0.08528862146487094, 0.21915848054899953, 0.19709591355222641, 0.04929671660733514, 0.016766846250087803, 0.2577632398511826, 0.08708622336851281, 0.358034565965738, 0.07275865857279572, 0.3045527712024151, 0.14975614767791268, 0.08443015027979854, 0.04921625820848417, 0.08708622336851281, 0.31795330776459957, 0.2485707231076348, 0.17344075757750393, 0.016766846250087803, 0.11148046770770952, 0.2577632398511826, 0.11757283215115845, 0.22196632569014907, 0.11757283215115845, 0.025889444007437725, 0.1603516091989899, 0.19266670550118242, 0.09346761723034872, 0.18993857976934564, 0.0208737368789697, 0.13972763429804386, 0.1603516091989899, 0.3398665412476468, 0.15761192848893293, 0.17344075757750393, 0.08313965214379739, 0.009907386579823013, 0.18993857976934564, 0.09346761723034872, 0.15908679142359283, 0.08708622336851281, 0.17775447423955534, 0.12476634389270992, 0.2157458611463057, 0.18993857976934564, 0.12058423982414058, 0.038189621131833225, 0.1138247872166264, 0.2577632398511826, 0.06089140051642112, 0.08443015027979854, 0.19667279214874434, 0.21270108633285797, 0.14646970115442454, 0.0208737368789697, 0.09032982595858734, 0.05610498249413163, 0.19801607712856342, 0.07275865857279572, 0.17741970187751127, 0.12963321261797478, 0.08313965214379739, 0.2564144693987551, 0.034945472124941854, 0.35757905104613036, 0.08313965214379739, 0.2564144693987551, 0.13972763429804386, 0.21718967583380883, 0.03998007426750882, 0.06089140051642112, 0.13547032873651849, 0.03545180486103552, 0.2577632398511826, 0.20304063531305994, 0.13774171078869557, 0.038255796055522276, 0.17741970187751127, 0.19667279214874434, 0.11148046770770952, 0.31795330776459957, 0.060177169861067074, 0.12963321261797478, 0.08443015027979854, 0.2564144693987551, 0.2692576205785654, 0.15913123625784587, 0.0208737368789697, 0.2485707231076348, 0.01486860505150201, 0.09455610172345656, 0.01486860505150201, 0.2577632398511826, 0.18993857976934564, 0.15908679142359283)

Average:            0.1429292532910518
artifactUtility:    91.97082403220793
voteUtility:        179.4918754530946
improvementUtility: 216.07633613099054
meanQltyEst:        0.1429292532910518
PrimeMeanQltyEst:   0.30528353311879697

=> | IMPROVEMENT job |


*******************************************************************
probYes: 0.6139986042525805
current balance:    9.889999999999999

Particles:
(         0.24082761802378547, 0.27303754353776905, 0.21121596881117444, 0.08377140739772658, 0.5315872685999077, 0.38157119416439994, 0.4458298182921797, 0.2591983142990648, 0.21617288373518379, 0.20891900141192002, 0.3813790521065554, 0.3629082474538015, 0.3458331888866797, 0.3299894014635501, 0.2825052773529524, 0.7373486454882208, 0.3321632160343132, 0.22664202410384426, 0.25607997655805326, 0.14089464731988408, 0.3716589591725891, 0.21220589082135785, 0.5593768634089102, 0.3284880711553435, 0.33757752980756406, 0.29442344457065633, 0.3097553435030387, 0.603776069547658, 0.2384482990829446, 0.03547315205907817, 0.16422735753779447, 0.39511887997068007, 0.4516843536510188, 0.3181214268256561, 0.34895308630493577, 0.40745383062542195, 0.313622206903171, 0.4626772104069219, 0.21140011167138242, 0.37204569824095707, 0.3332779791171896, 0.2863757329480968, 0.23359819664802653, 0.6095255425985281, 0.4592665735843345, 0.504101266097083, 0.08433381019747914, 0.046849779912770124, 0.40447713590131795, 0.47716661514824193, 0.3876629298189735, 0.07931053648803203, 0.2404954197666668, 0.2736555747660887, 0.11480677198888116, 0.15114238190069976, 0.6359594292226711, 0.12196654745937544, 0.386518437714132, 0.31053302826836326, 0.43400095688736834, 0.3778783818792163, 0.33305153128927, 0.13418376583735708, 0.16317888680826037, 0.17159533968369306, 0.24651540331889357, 0.39086285154997835, 0.33696655618683685, 0.2424328733089508, 0.27943928171877186, 0.43132397751055246, 0.32607195616902335, 0.20015580521398843, 0.40519006320909073, 0.1956225173623336, 0.3457780831189903, 0.15443688314072082, 0.4607691807924529, 0.1308756419964827, 0.2326592605012478, 0.2606711132795772, 0.13808479826700348, 0.13354711010669396, 0.3700342537736838, 0.6699484722456225, 0.26064034101636674, 0.11255732781531458, 0.5041800217354361, 0.183188791761499, 0.16085654501629718, 0.2658096790940896, 0.22045020603564502, 0.23152197540507588, 0.38541567064410565, 0.08990461958115073, 0.1829604837469027, 0.5767973066135814, 0.34879883226932623, 0.31461039613384445)

Average:            0.30528353311879697
artifactUtility:    216.07883613099054
voteUtility:        301.71551970583323
improvementUtility: 325.669190594963
meanQltyEst:        0.30528353311879697
PrimeMeanQltyEst:   0.43070450074880384

=> | IMPROVEMENT job |


*******************************************************************
probYes: 0.5164105637039368
current balance:    9.839999999999998

Particles:
(         0.22241571432474727, 0.26776367580071253, 0.4046699569267044, 0.33955577874162096, 0.29218153210862047, 0.31591749570298644, 0.5102215925761748, 0.51835771853955, 0.06660695394480359, 0.2512770758154078, 0.7049555199362707, 0.31551665388792755, 0.3608278833380125, 0.6490431577991892, 0.3449103317109643, 0.6610934998905617, 0.3010625531715864, 0.6006519289989316, 0.4554846011964053, 0.5682889564939588, 0.6246360425584965, 0.5338595869810024, 0.5060818188974044, 0.16444693513890013, 0.5371192627410678, 0.3480967962014547, 0.48657149456037774, 0.7580870914173343, 0.09577989872522567, 0.7179387397166425, 0.6386219675075602, 0.315085884712745, 0.8488008053382999, 0.3477105582638901, 0.6021507342367286, 0.36783298729417835, 0.4442069572008071, 0.6909899549688472, 0.49253366877391763, 0.46960275252458955, 0.5990255798575634, 0.39511828685151107, 0.4184156588096098, 0.6447816615772953, 0.5984728509104229, 0.47008676263072535, 0.14673351320242137, 0.3609647166500581, 0.7784900506205434, 0.5118625012043122, 0.6329344965573134, 0.254852827251269, 0.5388193443248582, 0.6002705808789333, 0.4036654384276548, 0.41769498756799806, 0.5752663427986902, 0.3053759378768724, 0.39201751516104016, 0.40710806984969977, 0.5211304617086613, 0.3844256361982405, 0.4319552321001557, 0.3773280491593524, 0.269519810801809, 0.2821245052258253, 0.2296061903836634, 0.4821033939394235, 0.6105827879549242, 0.5037293942238028, 0.5871016420165068, 0.5358160069931123, 0.42261654381457314, 0.4625156727504758, 0.5824027417265861, 0.3850179713686986, 0.2599341142584528, 0.15124142456641942, 0.33800628497976676, 0.4520568156511413, 0.1339148619857173, 0.3275830128076811, 0.4433213142688837, 0.15754867784723003, 0.1865105224209841, 0.827948201696813, 0.3615997386935646, 0.18628164294547075, 0.39293031106779297, 0.3868799415978479, 0.2565128989911799, 0.5317749229033073, 0.29837929418864345, 0.2454087069785565, 0.41304724380219265, 0.3187471530983713, 0.5114020231426424, 0.4621396936140851, 0.4249143742481801, 0.3414772170862374)

Average:            0.43070450074880384
artifactUtility:    325.671690594963
voteUtility:        346.5415407237191
improvementUtility: 334.8433442448726
meanQltyEst:        0.43070450074880384
PrimeMeanQltyEst:   0.43877963128504255

=> | BALLOT job |
vote :: FALSE #L293

(false)


*******************************************************************
probYes: 0.5101857777367201
current balance:    9.829999999999998

Particles:
(         0.7580870914173343, 0.41769498756799806, 0.7179387397166425, 0.5211304617086613, 0.5060818188974044, 0.3773280491593524, 0.5338595869810024, 0.5338595869810024, 0.5037293942238028, 0.47008676263072535, 0.6490431577991892, 0.39511828685151107, 0.827948201696813, 0.7580870914173343, 0.6386219675075602, 0.18628164294547075, 0.31591749570298644, 0.2454087069785565, 0.5118625012043122, 0.5338595869810024, 0.40710806984969977, 0.2821245052258253, 0.2599341142584528, 0.5682889564939588, 0.5990255798575634, 0.15124142456641942, 0.7580870914173343, 0.3414772170862374, 0.6909899549688472, 0.6909899549688472, 0.6909899549688472, 0.7049555199362707, 0.6490431577991892, 0.4621396936140851, 0.15124142456641942, 0.5037293942238028, 0.6386219675075602, 0.3477105582638901, 0.2599341142584528, 0.33955577874162096, 0.5114020231426424, 0.4249143742481801, 0.5102215925761748, 0.1865105224209841, 0.7179387397166425, 0.2565128989911799, 0.22241571432474727, 0.39511828685151107, 0.4442069572008071, 0.5317749229033073, 0.3850179713686986, 0.3053759378768724, 0.2599341142584528, 0.2821245052258253, 0.6490431577991892, 0.4249143742481801, 0.3609647166500581, 0.36783298729417835, 0.5338595869810024, 0.49253366877391763, 0.6610934998905617, 0.26776367580071253, 0.3187471530983713, 0.36783298729417835, 0.6490431577991892, 0.3480967962014547, 0.8488008053382999, 0.4821033939394235, 0.3609647166500581, 0.315085884712745, 0.22241571432474727, 0.4319552321001557, 0.3773280491593524, 0.22241571432474727, 0.4036654384276548, 0.6021507342367286, 0.4036654384276548, 0.6329344965573134, 0.3608278833380125, 0.4625156727504758, 0.3608278833380125, 0.3449103317109643, 0.5824027417265861, 0.4621396936140851, 0.3773280491593524, 0.6006519289989316, 0.46960275252458955, 0.6002705808789333, 0.29837929418864345, 0.6246360425584965, 0.6610934998905617, 0.48657149456037774, 0.6246360425584965, 0.4433213142688837, 0.6490431577991892, 0.6447816615772953, 0.09577989872522567, 0.5102215925761748, 0.6610934998905617, 0.41304724380219265)

Average:            0.4681189575251392
artifactUtility:    360.4380410506978
voteUtility:        383.43677873541344
improvementUtility: 374.8800467971783
meanQltyEst:        0.4681189575251392
PrimeMeanQltyEst:   0.48433584329249546

=> | BALLOT job |
vote :: TRUE #L293

(true, false)


*******************************************************************
probYes: 0.5118689265476976
current balance:    9.819999999999999

Particles:
(         0.3414772170862374, 0.46960275252458955, 0.6021507342367286, 0.18628164294547075, 0.15124142456641942, 0.29837929418864345, 0.5102215925761748, 0.7580870914173343, 0.6610934998905617, 0.3480967962014547, 0.3773280491593524, 0.6386219675075602, 0.5102215925761748, 0.5102215925761748, 0.3480967962014547, 0.2599341142584528, 0.2454087069785565, 0.6006519289989316, 0.5338595869810024, 0.6610934998905617, 0.3773280491593524, 0.4036654384276548, 0.39511828685151107, 0.3187471530983713, 0.6002705808789333, 0.46960275252458955, 0.3477105582638901, 0.2565128989911799, 0.6610934998905617, 0.6386219675075602, 0.3850179713686986, 0.7049555199362707, 0.5338595869810024, 0.3414772170862374, 0.5338595869810024, 0.3414772170862374, 0.6610934998905617, 0.2821245052258253, 0.3477105582638901, 0.6021507342367286, 0.7049555199362707, 0.33955577874162096, 0.6490431577991892, 0.3850179713686986, 0.7580870914173343, 0.40710806984969977, 0.3773280491593524, 0.3609647166500581, 0.15124142456641942, 0.6006519289989316, 0.2599341142584528, 0.3608278833380125, 0.5211304617086613, 0.41304724380219265, 0.3773280491593524, 0.15124142456641942, 0.4036654384276548, 0.4249143742481801, 0.4319552321001557, 0.6610934998905617, 0.4621396936140851, 0.5338595869810024, 0.40710806984969977, 0.5317749229033073, 0.3609647166500581, 0.4249143742481801, 0.39511828685151107, 0.2599341142584528, 0.3187471530983713, 0.3477105582638901, 0.22241571432474727, 0.6909899549688472, 0.5102215925761748, 0.39511828685151107, 0.3773280491593524, 0.15124142456641942, 0.3773280491593524, 0.22241571432474727, 0.315085884712745, 0.2599341142584528, 0.2454087069785565, 0.6386219675075602, 0.7179387397166425, 0.6610934998905617, 0.33955577874162096, 0.4036654384276548, 0.6386219675075602, 0.36783298729417835, 0.3480967962014547, 0.4621396936140851, 0.4036654384276548, 0.3477105582638901, 0.15124142456641942, 0.4249143742481801, 0.41769498756799806, 0.5338595869810024, 0.5338595869810024, 0.2565128989911799, 0.3477105582638901, 0.49253366877391763)

Average:            0.4325058781396502
artifactUtility:    325.5019643657245
voteUtility:        330.920143275954
improvementUtility: 325.4994643657245
meanQltyEst:        0.4325058781396502
PrimeMeanQltyEst:   0.42899455478096443

=> | BALLOT job |
vote :: TRUE #L293

(true, true, false)


*******************************************************************
probYes: 0.49571168189275455
current balance:    9.809999999999999

Particles:
(         0.4036654384276548, 0.4249143742481801, 0.46960275252458955, 0.3414772170862374, 0.2454087069785565, 0.33955577874162096, 0.40710806984969977, 0.3477105582638901, 0.3480967962014547, 0.4036654384276548, 0.5338595869810024, 0.7179387397166425, 0.46960275252458955, 0.3609647166500581, 0.39511828685151107, 0.6610934998905617, 0.18628164294547075, 0.3773280491593524, 0.2821245052258253, 0.7179387397166425, 0.3477105582638901, 0.39511828685151107, 0.4036654384276548, 0.3773280491593524, 0.5102215925761748, 0.3773280491593524, 0.15124142456641942, 0.22241571432474727, 0.22241571432474727, 0.46960275252458955, 0.41769498756799806, 0.15124142456641942, 0.3480967962014547, 0.5338595869810024, 0.4249143742481801, 0.315085884712745, 0.2565128989911799, 0.5102215925761748, 0.4319552321001557, 0.3773280491593524, 0.6021507342367286, 0.2565128989911799, 0.33955577874162096, 0.2599341142584528, 0.5102215925761748, 0.15124142456641942, 0.3187471530983713, 0.5317749229033073, 0.15124142456641942, 0.3414772170862374, 0.18628164294547075, 0.46960275252458955, 0.15124142456641942, 0.5102215925761748, 0.29837929418864345, 0.3480967962014547, 0.2454087069785565, 0.3477105582638901, 0.39511828685151107, 0.29837929418864345, 0.36783298729417835, 0.3414772170862374, 0.15124142456641942, 0.2454087069785565, 0.4249143742481801, 0.2599341142584528, 0.46960275252458955, 0.3480967962014547, 0.7049555199362707, 0.3477105582638901, 0.15124142456641942, 0.3850179713686986, 0.3477105582638901, 0.2599341142584528, 0.5338595869810024, 0.7179387397166425, 0.6021507342367286, 0.15124142456641942, 0.15124142456641942, 0.22241571432474727, 0.3187471530983713, 0.3477105582638901, 0.22241571432474727, 0.6021507342367286, 0.2599341142584528, 0.15124142456641942, 0.3480967962014547, 0.5317749229033073, 0.3187471530983713, 0.3773280491593524, 0.3773280491593524, 0.5338595869810024, 0.2454087069785565, 0.4036654384276548, 0.5102215925761748, 0.3414772170862374, 0.6021507342367286, 0.15124142456641942, 0.2599341142584528, 0.6006519289989316)

Average:            0.37078723225592797
artifactUtility:    270.0164303949861
voteUtility:        282.2059893476067
improvementUtility: 270.0139303949861
meanQltyEst:        0.37078723225592797
PrimeMeanQltyEst:   0.35083039504546315

=> | BALLOT job |
vote :: FALSE #L293

(false, true, true, false)


*******************************************************************
probYes: 0.49318290032374923
current balance:    9.799999999999999

Particles:
(         0.3414772170862374, 0.2454087069785565, 0.46960275252458955, 0.5102215925761748, 0.40710806984969977, 0.46960275252458955, 0.6021507342367286, 0.3480967962014547, 0.5102215925761748, 0.6021507342367286, 0.7179387397166425, 0.6021507342367286, 0.5102215925761748, 0.3477105582638901, 0.3477105582638901, 0.6021507342367286, 0.5317749229033073, 0.5338595869810024, 0.4036654384276548, 0.5338595869810024, 0.7049555199362707, 0.46960275252458955, 0.4036654384276548, 0.5102215925761748, 0.3187471530983713, 0.15124142456641942, 0.39511828685151107, 0.7179387397166425, 0.3850179713686986, 0.3477105582638901, 0.5102215925761748, 0.3480967962014547, 0.5317749229033073, 0.3480967962014547, 0.6021507342367286, 0.18628164294547075, 0.5317749229033073, 0.6021507342367286, 0.6006519289989316, 0.7179387397166425, 0.2599341142584528, 0.3480967962014547, 0.2599341142584528, 0.5338595869810024, 0.15124142456641942, 0.15124142456641942, 0.29837929418864345, 0.22241571432474727, 0.3773280491593524, 0.46960275252458955, 0.41769498756799806, 0.3773280491593524, 0.4036654384276548, 0.5102215925761748, 0.5102215925761748, 0.3480967962014547, 0.3477105582638901, 0.3480967962014547, 0.46960275252458955, 0.36783298729417835, 0.4319552321001557, 0.46960275252458955, 0.15124142456641942, 0.15124142456641942, 0.3480967962014547, 0.46960275252458955, 0.15124142456641942, 0.3480967962014547, 0.3773280491593524, 0.3480967962014547, 0.3609647166500581, 0.39511828685151107, 0.7179387397166425, 0.7179387397166425, 0.22241571432474727, 0.46960275252458955, 0.39511828685151107, 0.4249143742481801, 0.36783298729417835, 0.5338595869810024, 0.5338595869810024, 0.15124142456641942, 0.3187471530983713, 0.6021507342367286, 0.7179387397166425, 0.5317749229033073, 0.4036654384276548, 0.3773280491593524, 0.15124142456641942, 0.4036654384276548, 0.7179387397166425, 0.6021507342367286, 0.7179387397166425, 0.46960275252458955, 0.315085884712745, 0.4319552321001557, 0.5102215925761748, 0.6021507342367286, 0.15124142456641942, 0.4249143742481801)

Average:            0.4317996722594078
artifactUtility:    324.72152439774374
voteUtility:        327.221511832509
improvementUtility: 324.71902439774374
meanQltyEst:        0.4317996722594078
PrimeMeanQltyEst:   0.41818421634412795

=> | BALLOT job |
vote :: FALSE #L293

(false, false, true, true, false)


*******************************************************************
probYes: 0.4869145171983935
current balance:    9.79

Particles:
(         0.7179387397166425, 0.29837929418864345, 0.46960275252458955, 0.5338595869810024, 0.46960275252458955, 0.22241571432474727, 0.2599341142584528, 0.7049555199362707, 0.5102215925761748, 0.6021507342367286, 0.5102215925761748, 0.4036654384276548, 0.7049555199362707, 0.7179387397166425, 0.7049555199362707, 0.5338595869810024, 0.3773280491593524, 0.3477105582638901, 0.5317749229033073, 0.7179387397166425, 0.3480967962014547, 0.46960275252458955, 0.7049555199362707, 0.15124142456641942, 0.18628164294547075, 0.3187471530983713, 0.36783298729417835, 0.46960275252458955, 0.15124142456641942, 0.40710806984969977, 0.3773280491593524, 0.4249143742481801, 0.5317749229033073, 0.46960275252458955, 0.2599341142584528, 0.5102215925761748, 0.5317749229033073, 0.3480967962014547, 0.3850179713686986, 0.3414772170862374, 0.5317749229033073, 0.4036654384276548, 0.5102215925761748, 0.7179387397166425, 0.7179387397166425, 0.7179387397166425, 0.3480967962014547, 0.2599341142584528, 0.5102215925761748, 0.36783298729417835, 0.15124142456641942, 0.7179387397166425, 0.2599341142584528, 0.2454087069785565, 0.46960275252458955, 0.39511828685151107, 0.7179387397166425, 0.46960275252458955, 0.46960275252458955, 0.5317749229033073, 0.3773280491593524, 0.5102215925761748, 0.3773280491593524, 0.3480967962014547, 0.5102215925761748, 0.5338595869810024, 0.7179387397166425, 0.40710806984969977, 0.15124142456641942, 0.7179387397166425, 0.7179387397166425, 0.36783298729417835, 0.3477105582638901, 0.7179387397166425, 0.7179387397166425, 0.5102215925761748, 0.46960275252458955, 0.4036654384276548, 0.5317749229033073, 0.6021507342367286, 0.7179387397166425, 0.15124142456641942, 0.15124142456641942, 0.5102215925761748, 0.5102215925761748, 0.5317749229033073, 0.36783298729417835, 0.46960275252458955, 0.46960275252458955, 0.5338595869810024, 0.3480967962014547, 0.7179387397166425, 0.36783298729417835, 0.7179387397166425, 0.6021507342367286, 0.6021507342367286, 0.5317749229033073, 0.3480967962014547, 0.46960275252458955, 0.5338595869810024)

Average:            0.4729902797369649
artifactUtility:    364.2621215072881
voteUtility:        366.5441174225516
improvementUtility: 364.2596215072881
meanQltyEst:        0.4729902797369649
PrimeMeanQltyEst:   0.47409686836712145

=> | BALLOT job |
vote :: TRUE #L293

(true, false, false, true, true, false)


*******************************************************************
probYes: 0.48574728072330076
current balance:    9.78

Particles:
(         0.7179387397166425, 0.3187471530983713, 0.5317749229033073, 0.2599341142584528, 0.6021507342367286, 0.3850179713686986, 0.15124142456641942, 0.39511828685151107, 0.15124142456641942, 0.40710806984969977, 0.15124142456641942, 0.7179387397166425, 0.7179387397166425, 0.3773280491593524, 0.5102215925761748, 0.3850179713686986, 0.5338595869810024, 0.3480967962014547, 0.5338595869810024, 0.36783298729417835, 0.46960275252458955, 0.3850179713686986, 0.46960275252458955, 0.7179387397166425, 0.5317749229033073, 0.3773280491593524, 0.2599341142584528, 0.5102215925761748, 0.36783298729417835, 0.7179387397166425, 0.5338595869810024, 0.18628164294547075, 0.46960275252458955, 0.2454087069785565, 0.3773280491593524, 0.5102215925761748, 0.18628164294547075, 0.5317749229033073, 0.7179387397166425, 0.3480967962014547, 0.5317749229033073, 0.15124142456641942, 0.46960275252458955, 0.46960275252458955, 0.3480967962014547, 0.5102215925761748, 0.40710806984969977, 0.36783298729417835, 0.5102215925761748, 0.3480967962014547, 0.2599341142584528, 0.18628164294547075, 0.7179387397166425, 0.5338595869810024, 0.5102215925761748, 0.5102215925761748, 0.36783298729417835, 0.36783298729417835, 0.4036654384276548, 0.6021507342367286, 0.5338595869810024, 0.40710806984969977, 0.22241571432474727, 0.3773280491593524, 0.7049555199362707, 0.7179387397166425, 0.5317749229033073, 0.5317749229033073, 0.3477105582638901, 0.5317749229033073, 0.7049555199362707, 0.6021507342367286, 0.15124142456641942, 0.5338595869810024, 0.15124142456641942, 0.7179387397166425, 0.5317749229033073, 0.4036654384276548, 0.3187471530983713, 0.5317749229033073, 0.5338595869810024, 0.4249143742481801, 0.4249143742481801, 0.3480967962014547, 0.5102215925761748, 0.46960275252458955, 0.18628164294547075, 0.3187471530983713, 0.46960275252458955, 0.2599341142584528, 0.2599341142584528, 0.3773280491593524, 0.5317749229033073, 0.3477105582638901, 0.5317749229033073, 0.15124142456641942, 0.5338595869810024, 0.15124142456641942, 0.7179387397166425, 0.3480967962014547)

Average:            0.4350240102788156
artifactUtility:    328.67745998261273
voteUtility:        327.12715831019904
improvementUtility: 328.67495998261273
meanQltyEst:        0.4350240102788156
PrimeMeanQltyEst:   0.4360500413420587
Final Utility: 328.67745998261273

Process finished with exit code 0

*/
